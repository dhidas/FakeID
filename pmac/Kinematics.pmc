#include "Constants.pmc"
#include "PVariables.pmc"


i5213=10   ; segmentation time (needed for lookahead)
;i5220=50   ; lookahead length (needed to limit max velocity to max set in CS)
i5250=1    ; Enable kinematics


&2 Open Forward Clear

// Compensate for the offsets
Q_Fwd_Mtr1Tmp = (P_Mtr1_KinPos + P_Mtr1_Offset) / kEncCntsPerUm
Q_Fwd_Mtr2Tmp = (P_Mtr2_KinPos + P_Mtr2_Offset) / kEncCntsPerUm
Q_Fwd_Mtr3Tmp = (P_Mtr3_KinPos + P_Mtr3_Offset) / kEncCntsPerUm
Q_Fwd_Mtr4Tmp = (P_Mtr4_KinPos + P_Mtr4_Offset) / kEncCntsPerUm
Q_A_Gap_KinPos = (Q_Fwd_Mtr1Tmp + Q_Fwd_Mtr2Tmp + Q_Fwd_Mtr3Tmp + Q_Fwd_Mtr4Tmp)/2  // Q1 = A axis: GAP
Q_B_Ele_KinPos = (Q_Fwd_Mtr1Tmp + Q_Fwd_Mtr2Tmp - Q_Fwd_Mtr3Tmp - Q_Fwd_Mtr4Tmp)/4  // Q2 = B axis: CENTER OFFSET
Q_C_Tap_KinPos =  Q_Fwd_Mtr1Tmp + Q_Fwd_Mtr3Tmp - Q_Fwd_Mtr2Tmp - Q_Fwd_Mtr4Tmp     // Q3 = C axis: TAPER
Q_U_Tlt_KinPos = (Q_Fwd_Mtr1Tmp - Q_Fwd_Mtr2Tmp - Q_Fwd_Mtr3Tmp + Q_Fwd_Mtr4Tmp)/2  // Q4 = U axis: TILT

Close


// ******************************************************************************
// Gap Inverse kinematic
// ******************************************************************************
&2 Open Inverse Clear

Q_Inv_Gap_Tmp = Q_A_Gap_KinPos * kEncCntsPerUm
Q_Inv_Ele_Tmp = Q_B_Ele_KinPos * kEncCntsPerUm
Q_Inv_Tap_Tmp = Q_C_Tap_KinPos * kEncCntsPerUm
Q_Inv_Tlt_Tmp = Q_U_Tlt_KinPos * kEncCntsPerUm

P_Mtr1_KinPos = Q_Inv_Gap_Tmp / 2 + Q_Inv_Ele_Tmp + Q_Inv_Tap_Tmp / 4 + Q_Inv_Tlt_Tmp / 2 - P_Mtr1_Offset
P_Mtr2_KinPos = Q_Inv_Gap_Tmp / 2 + Q_Inv_Ele_Tmp - Q_Inv_Tap_Tmp / 4 - Q_Inv_Tlt_Tmp / 2 - P_Mtr2_Offset
P_Mtr3_KinPos = Q_Inv_Gap_Tmp / 2 - Q_Inv_Ele_Tmp + Q_Inv_Tap_Tmp / 4 - Q_Inv_Tlt_Tmp / 2 - P_Mtr3_Offset
P_Mtr4_KinPos = Q_Inv_Gap_Tmp / 2 - Q_Inv_Ele_Tmp - Q_Inv_Tap_Tmp / 4 + Q_Inv_Tlt_Tmp / 2 - P_Mtr4_Offset

Close
